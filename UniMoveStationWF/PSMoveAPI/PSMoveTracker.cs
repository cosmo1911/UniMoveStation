/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace io.thp.psmove
{

    using System;
    using System.Runtime.InteropServices;
    using UniMove;

    public class PSMoveTracker : IDisposable
    {
        protected HandleRef tracker;
        protected bool swigCMemOwn;

        public PSMoveTracker()
        {

        }

        public PSMoveTracker(int camera)
            : this(pinvoke.new_PSMoveTracker__SWIG_1(camera), true)
        {

        }

        internal PSMoveTracker(IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            tracker = new HandleRef(this, cPtr);
        }

        internal static HandleRef getCPtr(PSMoveTracker obj)
        {
            return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.tracker;
        }

        ~PSMoveTracker()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (tracker.Handle != IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        pinvoke.delete_PSMoveTracker(tracker);
                    }
                    tracker = new HandleRef(null, IntPtr.Zero);
                }
                GC.SuppressFinalize(this);
            }
        }

        public float dimming
        {
            set
            {
                pinvoke.PSMoveTracker_dimming_set(tracker, value);
            }
            get
            {
                float ret = pinvoke.PSMoveTracker_dimming_get(tracker);
                return ret;
            }
        }

        public PSMoveTrackerExposure exposure
        {
            set
            {
                pinvoke.PSMoveTracker_exposure_set(tracker, (int)value);
            }
            get
            {
                PSMoveTrackerExposure ret = (PSMoveTrackerExposure)pinvoke.PSMoveTracker_exposure_get(tracker);
                return ret;
            }
        }

        public PSMoveTrackerStatus enable(PSMove move)
        {
            PSMoveTrackerStatus ret = (PSMoveTrackerStatus)pinvoke.PSMoveTracker_enable(tracker, PSMove.getCPtr(move));
            return ret;
        }

        public PSMoveTrackerStatus enable_with_color(PSMove move, byte r, byte g, byte b)
        {
            return pinvoke.PSMoveTracker_enable_with_color(tracker, PSMove.getCPtr(move), r, g, b);
        }

        public void annotate()
        {
            pinvoke.PSMoveTracker_annotate(tracker);
        }

        public void disable(PSMove move)
        {
            pinvoke.PSMoveTracker_disable(tracker, PSMove.getCPtr(move));
        }

        public void set_auto_update_leds(PSMove move, PSMoveBool auto_update_leds)
        {
            pinvoke.PSMoveTracker_set_auto_update_leds(tracker, PSMove.getCPtr(move), auto_update_leds);
        }

        public PSMoveBool get_auto_update_leds(PSMove move)
        {
            return pinvoke.PSMoveTracker_get_auto_update_leds(tracker, PSMove.getCPtr(move));
        }

        public void get_color(PSMove move, out byte r, out byte g, out byte b)
        {
            pinvoke.PSMoveTracker_get_color(tracker, PSMove.getCPtr(move), out r, out g, out b);
        }

        public void get_camera_color(PSMove move, out byte r, out byte g, out byte b)
        {
            pinvoke.PSMoveTracker_get_camera_color(tracker, PSMove.getCPtr(move), out r, out g, out b);
        }

        public int set_camera_color(PSMove move, byte r, byte g, byte b)
        {
            return pinvoke.PSMoveTracker_set_camera_color(tracker, PSMove.getCPtr(move), r, g, b);
        }

        public void enable_deinterlace(int enabled)
        {
            pinvoke.PSMoveTracker_enable_deinterlace(tracker, enabled);
        }

        public void set_mirror(int enabled)
        {
            pinvoke.PSMoveTracker_set_mirror(tracker, enabled);
        }

        public int get_mirror()
        {
            int ret = pinvoke.PSMoveTracker_get_mirror(tracker);
            return ret;
        }

        public PSMoveTrackerStatus get_status(PSMove move)
        {
            PSMoveTrackerStatus ret = (PSMoveTrackerStatus)pinvoke.PSMoveTracker_get_status(tracker, PSMove.getCPtr(move));
            return ret;
        }

        public void update_image()
        {
            pinvoke.PSMoveTracker_update_image(tracker);
        }

        public int update()
        {
            int ret = pinvoke.PSMoveTracker_update__SWIG_0(tracker);
            return ret;
        }

        public int update(PSMove move)
        {
            int ret = pinvoke.PSMoveTracker_update__SWIG_1(tracker, PSMove.getCPtr(move));
            return ret;
        }

        public PSMoveTrackerRGBImage get_image()
        {
            PSMoveTrackerRGBImage ret = new PSMoveTrackerRGBImage(pinvoke.PSMoveTracker_get_image(tracker), true);
            return ret;
        }

        public void get_position(PSMove move, out float x, out float y, out float rrad)
        {
            pinvoke.PSMoveTracker_get_position(tracker, PSMove.getCPtr(move), out x, out y, out rrad);
        }

        public void get_size(out int arg0, out int arg1)
        {
            pinvoke.PSMoveTracker_get_size(tracker, out arg0, out arg1);
        }

        public float distance_from_radius(float radius)
        {
            float ret = pinvoke.PSMoveTracker_distance_from_radius(tracker, radius);
            return ret;
        }

        public void set_distance_parameters(float height, float center, float hwhm, float shape)
        {
            pinvoke.PSMoveTracker_set_distance_parameters(tracker, height, center, hwhm, shape);
        }

        public void new_with_camera(int camera)
        {
            swigCMemOwn = true;
            tracker = new HandleRef(this, pinvoke.new_PSMoveTracker__SWIG_1(camera));
        }

        public IntPtr get_frame()
        {
            return pinvoke.psmove_tracker_get_frame(tracker);
        }
    }

}
